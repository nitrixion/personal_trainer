---
swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about\
    \     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\
    \ #swagger](http://swagger.io/irc/).      For this sample, you can use the api\
    \ key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/v2"
tags:
- name: "pet"
  description: "Everything about your Pets"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "http"
paths:
  /exercise:
    get:
      tags:
      - "exercise"
      summary: "Finds all exercises"
      description: "Returns all exercises accessible by the loggedin user"
      operationId: "getExercises"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Exercise"
        400:
          description: "Invalid status value"
      security:
      - workout_auth:
        - "read:exercise"
      x-swagger-router-controller: "Exercise"
    post:
      tags:
      - "exercise"
      summary: "Add a exercise to the store"
      description: ""
      operationId: "addExercise"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Exercise object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Exercise"
      responses:
        405:
          description: "Invalid input"
      security:
      - workout_auth:
        - "write:exercise"
        - "read:exercise"
      x-swagger-router-controller: "Exercise"
    put:
      tags:
      - "exercise"
      summary: "Update an existing Exercise"
      description: ""
      operationId: "updateExercise"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Exercise object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Exercise"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
      - workout_auth:
        - "write:exercise"
        - "read:exercise"
      x-swagger-router-controller: "Exercise"
  /exercise/{exerciseId}:
    get:
      tags:
      - "exercise"
      summary: "Finds exercise by id"
      description: "Returns an exercise"
      operationId: "getExerciseById"
      produces:
      - "application/json"
      parameters:
      - name: "exerciseId"
        in: "path"
        description: "ID of exercise to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Exercise"
        400:
          description: "Invalid workoutId"
      security:
      - workout_auth:
        - "read:exercise"
      x-swagger-router-controller: "Exercise"
    delete:
      tags:
      - "exercise"
      summary: "Deletes an exercise"
      description: ""
      operationId: "deleteExercise"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "exerciseId"
        in: "path"
        description: "Exercise id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Exercise not found"
      security:
      - workout_auth:
        - "write:exercise"
        - "read:exercise"
      x-swagger-router-controller: "Exercise"
  /movement:
    get:
      tags:
      - "movement"
      summary: "Finds all movements"
      description: "Returns all movements accessible by the loggedin user"
      operationId: "getMovements"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Movement"
        400:
          description: "Invalid status value"
      security:
      - workout_auth:
        - "read:movement"
      x-swagger-router-controller: "Movement"
    post:
      tags:
      - "movement"
      summary: "Add a movement to the store"
      description: ""
      operationId: "addMovement"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Movement object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Movement"
      responses:
        405:
          description: "Invalid input"
      security:
      - workout_auth:
        - "write:movement"
        - "read:movement"
      x-swagger-router-controller: "Movement"
    put:
      tags:
      - "movement"
      summary: "Update an existing Movement"
      description: ""
      operationId: "updateMovement"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Movement object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Movement"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Movement not found"
        405:
          description: "Validation exception"
      security:
      - workout_auth:
        - "write:movement"
        - "read:movement"
      x-swagger-router-controller: "Movement"
  /movement/{movementId}:
    get:
      tags:
      - "movement"
      summary: "Finds movement by id"
      description: "Returns an movement"
      operationId: "getMovementById"
      produces:
      - "application/json"
      parameters:
      - name: "movementId"
        in: "path"
        description: "ID of movement to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Movement"
        400:
          description: "Invalid workoutId"
      security:
      - workout_auth:
        - "read:movement"
      x-swagger-router-controller: "Movement"
    delete:
      tags:
      - "movement"
      summary: "Deletes an movement"
      description: ""
      operationId: "deleteMovement"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "movementId"
        in: "path"
        description: "Movement id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Movement not found"
      security:
      - workout_auth:
        - "write:movement"
        - "read:movement"
      x-swagger-router-controller: "Movement"
  /program:
    get:
      tags:
      - "program"
      summary: "Finds all programs"
      description: "Returns all programs accessible by the loggedin user"
      operationId: "getPrograms"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Program"
        400:
          description: "Invalid status value"
      security:
      - workout_auth:
        - "read:program"
      x-swagger-router-controller: "Program"
    post:
      tags:
      - "program"
      summary: "Add a program to the store"
      description: ""
      operationId: "addProgram"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Program object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Program"
      responses:
        405:
          description: "Invalid input"
      security:
      - workout_auth:
        - "write:program"
        - "read:program"
      x-swagger-router-controller: "Program"
    put:
      tags:
      - "program"
      summary: "Update an existing Program"
      description: ""
      operationId: "updateProgram"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Program object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Program"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
      - workout_auth:
        - "write:program"
        - "read:program"
      x-swagger-router-controller: "Program"
  /program/current:
    get:
      tags:
      - "program"
      summary: "Finds current active programs"
      description: "Returns current active program for logged in user"
      operationId: "getCurrentProgram"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Program"
        400:
          description: "Invalid status value"
      security:
      - workout_auth:
        - "read:program"
      x-swagger-router-controller: "Program"
  /program/{programId}:
    get:
      tags:
      - "program"
      summary: "Finds program by id"
      description: "Returns a program"
      operationId: "getProgramById"
      produces:
      - "application/json"
      parameters:
      - name: "programId"
        in: "path"
        description: "ID of program to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Program"
        400:
          description: "Invalid programId"
      security:
      - workout_auth:
        - "read:program"
      x-swagger-router-controller: "Program"
    delete:
      tags:
      - "program"
      summary: "Deletes a program"
      description: ""
      operationId: "deleteProgram"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "programId"
        in: "path"
        description: "Program id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Program not found"
      security:
      - workout_auth:
        - "write:program"
        - "read:program"
      x-swagger-router-controller: "Program"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
      x-swagger-router-controller: "User"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
      x-swagger-router-controller: "User"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
      x-swagger-router-controller: "User"
  /workout:
    get:
      tags:
      - "workouts"
      summary: "Finds all workouts"
      description: "Returns all workouts accessible by the loggedin user"
      operationId: "getWorkouts"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workout"
        400:
          description: "Invalid status value"
      security:
      - workout_auth:
        - "read:workout"
      x-swagger-router-controller: "Workouts"
    post:
      tags:
      - "workouts"
      summary: "Add a workout to the store"
      description: ""
      operationId: "addWorkout"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Workout object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Workout"
      responses:
        405:
          description: "Invalid input"
      security:
      - workout_auth:
        - "write:workout"
        - "read:workout"
      x-swagger-router-controller: "Workouts"
    put:
      tags:
      - "workouts"
      summary: "Update an existing pet"
      description: ""
      operationId: "updateWorkout"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Workout object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Workout"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
        405:
          description: "Validation exception"
      security:
      - workout_auth:
        - "write:workout"
        - "read:workout"
      x-swagger-router-controller: "Workouts"
  /workout/owner/{userId}:
    get:
      tags:
      - "workouts"
      summary: "Finds workouts by owner"
      description: "Finds workouts by owner"
      operationId: "getWorkoutByOwner"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of workout owner to filter"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Workout"
        400:
          description: "Invalid userId"
      security:
      - workout_auth:
        - "write:workout"
        - "read:workout"
      x-swagger-router-controller: "Workouts"
  /workout/{workoutId}:
    get:
      tags:
      - "workouts"
      summary: "Finds all workouts"
      description: "Returns all workouts accessible by the loggedin user"
      operationId: "getCurrentUserWorkouts"
      produces:
      - "application/json"
      parameters:
      - name: "workoutId"
        in: "path"
        description: "ID of workout to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Workout"
        400:
          description: "Invalid workoutId"
      security:
      - workout_auth:
        - "read:workout"
      x-swagger-router-controller: "Workouts"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
  workout_auth:
    type: "oauth2"
    authorizationUrl: "http://localhost"
    flow: "implicit"
    scopes:
      write:workout: "modify pets in your account"
      read:workout: "read your pets"
      write:program: "modify programs you can access"
      read:program: "read your programs"
      write:exercise: "modify exercises you can access"
      read:exercise: "read your exercises"
      write:movement: "modify movements you can access"
      read:movement: "read your movements"
definitions:
  Workout:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        description: "Name of workout"
      exercises:
        type: "array"
        items:
          $ref: "#/definitions/Exercise"
      notes:
        type: "string"
      owner:
        $ref: "#/definitions/User"
      public:
        type: "boolean"
        default: false
    xml:
      name: "Workout"
  Exercise:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      movements:
        type: "array"
        items:
          $ref: "#/definitions/Movement"
      sets:
        type: "integer"
        format: "int32"
      reps:
        type: "integer"
        format: "int32"
        description: "Repitions per set"
      repType:
        $ref: "#/definitions/RepType"
      weight:
        type: "integer"
        format: "int32"
      weightType:
        $ref: "#/definitions/WeightType"
  Movement:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
  Program:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      trainer:
        $ref: "#/definitions/User"
      trainee:
        $ref: "#/definitions/User"
      workouts:
        type: "array"
        items:
          $ref: "#/definitions/Workout"
      notes:
        type: "string"
      start:
        type: "string"
        format: "date-time"
      end:
        type: "string"
        format: "date-time"
      complete:
        type: "boolean"
        default: false
      performances:
        type: "array"
        items:
          $ref: "#/definitions/Performance"
  Performance:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      programId:
        type: "integer"
        format: "int64"
      performances:
        type: "array"
        items:
          $ref: "#/definitions/WorkoutPerformance"
  WorkoutPerformance:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      exerciseId:
        type: "integer"
        format: "int64"
      sets:
        type: "integer"
        format: "int32"
      reps:
        type: "integer"
        format: "int32"
        description: "Repitions per set"
      repType:
        $ref: "#/definitions/RepType"
      weight:
        type: "integer"
        format: "int32"
      weightType:
        $ref: "#/definitions/WeightType"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      roles:
        type: "array"
        items:
          $ref: "#/definitions/Role"
    xml:
      name: "User"
  Role:
    type: "string"
    enum:
    - "trainer"
    - "trainee"
    - "admin"
  WeightType:
    type: "string"
    enum:
    - "lbs"
    - "kg"
    - "RM"
  RepType:
    type: "string"
    enum:
    - "Reps"
    - "Sec"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
